ALWAYS REMEMBER: what's the minimal interface which has "magic"?!?!

-- what do I want for tomorrow --

[ ] requests come in
  [x] better randomization
  [x] they have title
  [x] they have constraints
  [x] constraints visible on hover
    [x] fix the add event problem (check how we're figure out where)

  [x] they become linked
    [x] get rid of moods
    [x] hover event

  [ ] separate out supplicantGroup -> rabble
  [ ] fix satisfaction bug
  
  [ ] scroll to show supplicant

  [ ] fixes to eventEditView
    [ ] tab trigger on edit event
    [ ] double click to launch view
  [ ] they come in
  [ ] timer
  [ ] points - SCORE VARIATION : length ** 1.5 / num_slots (??)
  [ ] they talk to you?

  [ ] SHOW LENGTH SATISFACTION
    
[ ] networked version
  -- BASIC wizard of oz mode


[ ] better requests
  [ ] add constraints
  [ ] show constraints
  [ ] connect constraints + requests
  [ ] periodic add
  [ ] score
  [ ] timer
  
-- later --
  
[ ] three main modes - implement
  [ ] test mode
    [ ] basic requests
    [ ] link: request <-> event  
  [ ] type mode
  [ ] do mode (wizard of oz)
  [ ] do mode (real)

before launch:

[ ] access permissions for get/post/put/delete
  [ ] RemoteModel
  [ ] RemoteMethod

# NOTES #

icons:
http://www.iconarchive.com/show/face-avatars-icons-by-deleket.html

<!-- [x] test out history API
  [x] can this be used as a router? - YES .. but some weirdness to figure out

[ ] do the whole remote model thing


[ ] test out the channel API
  [ ] do I want to wrap it?
  [ ] perhaps as a remote function call?
  
[ ] start to write the game

[ ] create game mockups (keynote?)
[ ] CMU stuff
[ ] move to github
  [ ] recursive copy to a new folder
  [ ] clear out the bad files (including tmproj)
  [ ] main.coffee/html -> game.coffee/html
  [ ] submit to github
  [ ] add tmproj
[ ] start coding a mockup of the game


variable naming conventions:

*_json -> a python object which can be serialized with json.dumps -->
