ALWAYS REMEMBER: what's the minimal interface which has "magic"?!?!

EXPECT LOTS OF TROUBLE - you will untangle it -- don't lose faith!!! :)
    
-- todo --
[x] get an old puzzle if no new ones exist
  [x] indicate with a leading comma
  [x] check whether soln_cal has already been submitted
[x] figure out the enqueue case when the calendar has already been set
[x] put in skip button
[x] test with three people
[x] make the calendar non-edit-able
  [x] do this with ugly cover hack
-- end: todo --

[ ] TEST IT OUT WITHOU admin privilages
[ ] TEST IT OUT ON THE REAL SITE!!

[ ] cool stuff
  [ ] make the type game more exciting -- timer
  [ ] make it so that you can only add a single event
    [ ] color the events properly in "do mode"
  [ ] score things properly
  [ ] events are cancel-able
  [ ] new calendar events are completely undefined
  [ ] small fixes below
  [ ] johnny's comments

-- during the flight  --

  
-- small fixes --

[ ] points - SCORE VARIATION : length ** 1.5 / num_slots (??)
[ ] separate out gameView
[ ] fixes to eventEditView
  [ ] tab trigger on edit event
  [ ] double click to launch view
[ ] emphasize supplicant  
  [ ] scroll to show supplicant
  [ ] nice bounce animation
[ ] when no text in the text area: "(type instruction in here)"

-- before launch -- 

[ ] access permissions for get/post/put/delete
  [ ] RemoteModel
  [ ] RemoteMethod

# NOTES #

icons:
http://www.iconarchive.com/show/face-avatars-icons-by-deleket.html

<!-- [x] test out history API
  [x] can this be used as a router? - YES .. but some weirdness to figure out

[ ] do the whole remote model thing


[ ] test out the channel API
  [ ] do I want to wrap it?
  [ ] perhaps as a remote function call?
  
[ ] start to write the game

[ ] create game mockups (keynote?)
[ ] CMU stuff
[ ] move to github
  [ ] recursive copy to a new folder
  [ ] clear out the bad files (including tmproj)
  [ ] main.coffee/html -> game.coffee/html
  [ ] submit to github
  [ ] add tmproj
[ ] start coding a mockup of the game


variable naming conventions:

*_json -> a python object which can be serialized with json.dumps -->
