ALWAYS REMEMBER: what's the minimal interface which has "magic"?!?!

[ ] demand view
  [x] basic html
  [x] a single instruction
  [ ] guide

    [x] switch to better mode dispatch
      [x] move rabble to prototype mode
      [x] move instructions
      [x] move calendar
    [ ] split parent into model / view
      [ ] externalize the router
      [ ] swith to model class
        [ ] make self-constructing...
      [ ] dispatch based on type
      [ ] make that a prototype

    [ ] server side calendar
      [ ] give the calendars UIDs
      [ ] way to "save" the calendar
        [ ] save all relevant calEvent properties
        
  --- ---

      [ ] way to "load" a calendar
      [ ] get the default calendar
      [ ] start with "default" calendar
      [ ] save subsequent calendars

  [ ] full loop
    [ ] load it up in admin view
    [ ] send it back

[ ] mode dispatch
[ ] see the demands

-- during the flight  --

  
-- small fixes --

[ ] points - SCORE VARIATION : length ** 1.5 / num_slots (??)
[ ] separate out gameView
[ ] fixes to eventEditView
  [ ] tab trigger on edit event
  [ ] double click to launch view
[ ] emphasize supplicant  
  [ ] scroll to show supplicant
  [ ] nice bounce animation
[ ] when no text in the text area: "(type instruction in here)"

-- before launch -- 

[ ] access permissions for get/post/put/delete
  [ ] RemoteModel
  [ ] RemoteMethod

# NOTES #

icons:
http://www.iconarchive.com/show/face-avatars-icons-by-deleket.html

<!-- [x] test out history API
  [x] can this be used as a router? - YES .. but some weirdness to figure out

[ ] do the whole remote model thing


[ ] test out the channel API
  [ ] do I want to wrap it?
  [ ] perhaps as a remote function call?
  
[ ] start to write the game

[ ] create game mockups (keynote?)
[ ] CMU stuff
[ ] move to github
  [ ] recursive copy to a new folder
  [ ] clear out the bad files (including tmproj)
  [ ] main.coffee/html -> game.coffee/html
  [ ] submit to github
  [ ] add tmproj
[ ] start coding a mockup of the game


variable naming conventions:

*_json -> a python object which can be serialized with json.dumps -->
